{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"to",
				"total3\tdouble total3"
			],
			[
				"toal",
				"total\tdouble total"
			],
			[
				"in",
				"include_directories\tbuiltin"
			],
			[
				"link",
				"link_directories\tbuiltin"
			],
			[
				"TRT",
				"TRT_Infer"
			],
			[
				"trt",
				"trt_interface.h"
			],
			[
				"do",
				"doInfer\tvoid doInfer(cv::Mat img, float *output)"
			],
			[
				"img",
				"img_util.hpp"
			],
			[
				"IN",
				"INPUT_C"
			],
			[
				"INP",
				"INPUT_W\tint INPUT_W"
			],
			[
				"inp",
				"INPUT_W"
			],
			[
				"bat",
				"batchSize"
			],
			[
				"Trt",
				"TRT_Infer"
			],
			[
				"pri",
				"private"
			],
			[
				"LOG",
				"LOG_ERROR\tLogStreamConsumer LOG_ERROR(const Logger &logger)"
			],
			[
				"out",
				"outputIndex\tconst int outputIndex"
			],
			[
				"cudaM",
				"cudaMemcpy\tcudaError_t cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)"
			],
			[
				"input",
				"input\tfloat * input"
			],
			[
				"sta",
				"status"
			],
			[
				"de",
				"define"
			],
			[
				"cudaStream",
				"cudaStream_t\tcudaStream_t"
			],
			[
				"size",
				"sizeof\tsize_t sizeof(expression-or-type)"
			],
			[
				"OU",
				"OUTPUT_BLOB_NAME\tconst char * OUTPUT_BLOB_NAME"
			],
			[
				"INPU",
				"INPUT_BLOB_NAME\tconst char * INPUT_BLOB_NAME"
			],
			[
				"getBin",
				"getBindingIndex\tint getBindingIndex(const char *name) const"
			],
			[
				"re",
				"reportTest\tint reportTest(const TestAtom &testAtom, bool pass)"
			],
			[
				"con",
				"context"
			],
			[
				"us",
				"useDLACore\tint useDLACore"
			],
			[
				"CV_32F",
				"CV_32FC3\tCV_32FC3"
			],
			[
				"inpu",
				"INPUT_H\tconst int INPUT_H"
			],
			[
				"COLOR_B",
				"COLOR_BGR2RGB\tcv::ColorConversionCodes COLOR_BGR2RGB"
			],
			[
				"IM",
				"IMREAD_COLOR\tcv::ImreadModes IMREAD_COLOR"
			],
			[
				"G",
				"gLogger"
			],
			[
				"name",
				"namespace\tnamespace"
			],
			[
				"gL",
				"gLogger\tLogger gLogger"
			],
			[
				"deserial",
				"deserializeCudaEngine\tnvinfer1::ICudaEngine * deserializeCudaEngine(const void *blob, std::size_t size, IPluginFactory *pluginFactory)"
			],
			[
				"engin",
				"engine"
			],
			[
				"s",
				"samples"
			],
			[
				"g",
				"gLogger"
			],
			[
				"1_",
				"1_4e1f7ff7ea58c603476c25812b161ae.png\tw:1280 h:720"
			],
			[
				"imre",
				"imread\tMat imread(const String &filename)"
			],
			[
				"reportT",
				"reportTestStart\tvoid reportTestStart(TestAtom &testAtom)"
			],
			[
				"arg",
				"argv\tconst char ** argv"
			],
			[
				"emp",
				"empty\tbool empty() const"
			],
			[
				"gLog",
				"gLogError\tLogStreamConsumer gLogError"
			],
			[
				"cons",
				"const\tconst"
			],
			[
				"ch",
				"children"
			],
			[
				"xmlC",
				"xmlChildrenNode"
			],
			[
				"retur",
				"return\treturn expression"
			],
			[
				"fra",
				"frameCnt\tint frameCnt"
			],
			[
				"c",
				"c_str"
			],
			[
				"ret",
				"return\treturn expression"
			],
			[
				"d",
				"d_name\tchar [256] d_name"
			],
			[
				"inc",
				"include"
			],
			[
				"rect",
				"rect"
			],
			[
				"Rect",
				"Rect2f\tRect2f"
			],
			[
				"fl",
				"floor\tdouble floor(double __x)"
			],
			[
				"Fon",
				"FONT_HERSHEY_SCRIPT_COMPLEX\tcv::HersheyFonts FONT_HERSHEY_SCRIPT_COMPLEX"
			],
			[
				"Font",
				"FONT_HERSHEY_COMPLEX\tcv::HersheyFonts FONT_HERSHEY_COMPLEX"
			],
			[
				"ar",
				"area"
			],
			[
				"mon",
				"moments\tMoments moments(InputArray array)"
			],
			[
				"font_h",
				"FONT_HERSHEY_SIMPLEX\tcv::HersheyFonts FONT_HERSHEY_SIMPLEX"
			],
			[
				"fa",
				"false"
			],
			[
				"slct_",
				"slct_idx\tMat2i slct_idx"
			],
			[
				"slc",
				"slct_contours"
			],
			[
				"po",
				"Point"
			],
			[
				"slct",
				"slct_idx\tMat2i slct_idx"
			],
			[
				"emplace",
				"emplace_back\tvoid emplace_back(_Args &&__args...)"
			],
			[
				"dst",
				"dstImage\tMat dstImage"
			],
			[
				"FG",
				"FGMask_KNN"
			],
			[
				"hs",
				"hst"
			],
			[
				"int",
				"int"
			],
			[
				"hist",
				"histSize\tint [2] histSize"
			],
			[
				"his",
				"histImg\tMat histImg"
			],
			[
				"ds",
				"dstImage"
			],
			[
				"Mask",
				"maskKnn"
			],
			[
				"CV_RGB",
				"CV_RGB2HSV\tenum <anonymous> CV_RGB2HSV"
			],
			[
				"CV_GRAY2",
				"CV_GRAY2RGB\tenum <anonymous> CV_GRAY2RGB"
			],
			[
				"CV_BGR2",
				"CV_BGR2HSV\tenum <anonymous> CV_BGR2HSV"
			],
			[
				"Point",
				"Point2f\tPoint2f"
			],
			[
				"rec",
				"Rect2f\tRect2f"
			],
			[
				"rang",
				"rectangle\tvoid rectangle(InputOutputArray img, Point pt1, Point pt2, const Scalar &color)"
			],
			[
				"for",
				"for\tFor Loop"
			],
			[
				"CV_8U",
				"CV_8UC3\tCV_8UC3"
			],
			[
				"FGM",
				"FGMask_KNN\tcv::Mat FGMask_KNN"
			],
			[
				"fit",
				"fit_bg\tint fit_bg"
			],
			[
				"CV_8UC",
				"CV_8UC1\tCV_8UC1"
			],
			[
				"col",
				"cols\tint cols"
			],
			[
				"row",
				"rows\tint rows"
			],
			[
				"open",
				"opencv"
			],
			[
				"tim",
				"time_since_update\tint time_since_update"
			],
			[
				"mode",
				"model.h"
			],
			[
				"en",
				"encoder_tools/"
			],
			[
				"yol",
				"yoloWriter_map\tstd::map<std::string, std::shared_ptr<cv::VideoWriter> > yoloWriter_map"
			],
			[
				"f",
				"frame"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"PackageRe",
				"PackageResourceViewer: Open Resource"
			],
			[
				"pci",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"packageControl",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"package inst",
				"Package Control: Install Package"
			],
			[
				"packagerem",
				"Package Control: Remove Package"
			],
			[
				"packagecon",
				"Package Control: Install Package"
			],
			[
				"packageControl:",
				"Package Control: Install Package"
			],
			[
				"picp",
				"Package Control: Install Package"
			],
			[
				"View",
				"View: Toggle Menu"
			],
			[
				"package Control",
				"Package Control: Install Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 287.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/data/disk2/tmp/004_algorithm_demo/02_TensorRT/03_CPP/src/trt_infer.cpp",
		"/data/disk2/tmp/004_algorithm_demo/02_TensorRT/03_CPP/src/02_inference.cpp",
		"/data/disk2/tmp/002_CPP_demo/003_sort/001_merge_sort.cpp",
		"/data/disk1/project/03_tensorRT/tensorrt-zoo/tiny-tensorrt/spdlog/fmt/bundled/core.h",
		"/data/disk2/tmp/004_algorithm_demo/02_TensorRT/readme.txt",
		"/data/disk2/tmp/004_algorithm_demo/02_TensorRT/03_CPP/01_onnx2RT.cpp",
		"/data/disk2/tmp/004_algorithm_demo/02_TensorRT/03_CPP/CMakeLists.txt",
		"/data/disk2/tmp/004_algorithm_demo/02_TensorRT/03_CPP/readme.txt",
		"/data/disk1/workspace/07_CPP/01_bgtractorKNN/src/file_utils.h",
		"/data/disk2/tmp/004_algorithm_demo/02_TensorRT/03_CPP/02_inference.cpp",
		"/data/disk2/tmp/004_algorithm_demo/02_TensorRT/03_CPP/image.cpp",
		"/data/disk2/tmp/004_algorithm_demo/02_TensorRT/03_CPP/image.hpp",
		"/data/disk2/tmp/004_algorithm_demo/02_TensorRT/02_fastreid/readme.txt",
		"/data/disk2/tmp/004_algorithm_demo/02_TensorRT/01_pytorch/01_py2onnx.py",
		"/data/disk1/project/03_tensorRT/02_sun/README.md",
		"/data/disk2/tmp/004_algorithm_demo/02_TensorRT/01_pytorch/02_onnx2trt.py",
		"/data/disk1/project/03_tensorRT/02_sun/onnx_runtime_test.py",
		"/data/disk1/workspace/06_reid/01_fast_reid/02_fast_reid_inference/tools/03_check_onnx.py",
		"/data/disk2/tmp/004_algorithm_demo/02_TensorRT/02_fastreid/02_check_onnx.py",
		"/data/disk1/project/06_tensorRT/01_sun/onnx_runtime_test.py",
		"/data/disk2/tmp/004_algorithm_demo/02_TensorRT/02_fastreid/onnx_export.py",
		"/data/disk1/project/06_tensorRT/01_sun/readme.txt",
		"/data/disk1/workspace/07_CPP/02_xml/main.cpp",
		"/data/disk1/workspace/07_CPP/02_xml/tst.xml",
		"/data/disk1/project/03_tensorRT/tensorrt-zoo/01_mobileNetV3/Yolo_Batch_And_608_Test.cpp",
		"/data/disk1/project/03_tensorRT/tensorrt-zoo/CMakeLists.txt",
		"/data/disk1/project/03_tensorRT/tensorrt-zoo/tiny-tensorrt/Trt.cpp",
		"/data/disk1/project/03_tensorRT/tensorrt-zoo/tiny-tensorrt/Trt.h",
		"/data/disk1/workspace/07_CPP/CMakeLists.txt",
		"/data/disk1/project/03_tensorRT/tensorrt-zoo/01_mobileNetV3/readme",
		"/data/disk1/project/03_tensorRT/tensorrt-zoo/01_mobileNetV3/YoloV3.cpp",
		"/data/disk1/project/03_tensorRT/tensorrt-zoo/openpose/OpenPose.hpp",
		"/data/disk1/project/03_tensorRT/tensorrt-zoo/01_mobileNetV3/YoloV3.h",
		"/data/disk1/project/03_tensorRT/tensorrt-zoo/yolov3/Yolo_Batch_And_608_Test.cpp",
		"/data/disk1/project/03_tensorRT/tensorrt-zoo/01_mobileNetV3/CMakeLists.txt",
		"/data/disk1/project/03_tensorRT/tensorrt-zoo/yolov3/CMakeLists.txt",
		"/data/disk1/workspace/07_CPP/bgSubtractorKNN.cpp",
		"/data/disk1/workspace/07_CPP/file_utils.cpp",
		"/data/disk1/workspace/07_CPP/file_utils.h",
		"/data/disk2/tmp/002_CPP_demo/012_file_string/readme.txt",
		"/data/disk2/tmp/002_CPP_demo/012_file_string/file_utils.cpp",
		"/data/disk1/workspace/03_bg_detect/CMakeLists.txt",
		"/data/disk1/workspace/03_bg_detect/src/bgSubtractor.h",
		"/data/disk1/workspace/03_bg_detect/main.cpp",
		"/data/disk1/workspace/03_bg_detect/src/bgSubtractor.cpp",
		"/data/disk1/workspace/03_bg_detect/src/bgSubtractor_tools",
		"/data/disk1/workspace/03_bg_detect/src/BG_Mod.h",
		"/home/scheaven/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-mousemap",
		"/home/scheaven/.config/sublime-text-3/Packages/PackageResourceViewer/PackageResourceViewer.sublime-settings",
		"/data/disk1/workspace/03_bg_detect/src/BG_Mod.cpp",
		"/data/disk1/01_pro_inx/03_DarkNet_SORT/untitled.sublime-workspace",
		"/data/disk2/test_result/log_20210121.log",
		"/data/disk1/workspace/06_reid/01_fast_reid/readme.txt",
		"/data/disk1/workspace/06_reid/01_fast_reid/fast-reid/tools/deploy/onnx_export.py",
		"/data/disk1/project/02_jupyter/02_cv/02_bgSubtractorKNN.ipynb",
		"/data/disk1/workspace/uniqueID/lib/core/tracker_manager.h",
		"/data/disk1/workspace/uniqueID/lib/tracker_tools/tracker.cpp",
		"/data/disk1/workspace/uniqueID/lib/core/tracker_manager.cpp",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/readme",
		"/data/disk1/project/01_py_project/01_test/01_bgSubtractorMoG.py",
		"/data/disk1/project/01_py_project/01_test/01_bgSubtractorMoG.py]",
		"/data/disk2/test_result/log_20210109.log",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/lib/utils/time_util.cpp",
		"/data/disk1/workspace/uniqueID/lib/config.h",
		"/data/disk1/workspace/uniqueID/lib/tracker_tools/track.h",
		"/data/disk1/workspace/uniqueID/lib/utils/draw_util.h",
		"/data/disk1/workspace/uniqueID/lib/utils/draw_util.cpp",
		"/data/disk1/workspace/uniqueID/lib/utils/time_util.h",
		"/data/disk1/workspace/uniqueID/lib/utils/time_util.cpp",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/build/01_result/log_20210108.log",
		"/data/disk1/workspace/yolov4/lib/utils/draw_util.cpp",
		"/data/disk1/workspace/yolov4/lib/core/tracker_manager.cpp",
		"/data/disk1/workspace/yolov4/SDK_main.cpp",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/lib/config.h",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/lib/tracker_tools/tracker.h",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/lib/tracker_tools/tracker.cpp",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/lib/utils/draw_util.cpp",
		"/data/disk1/workspace/uniqueID/CMakeLists.txt",
		"/data/disk1/workspace/uniqueID/lib/encoder_tools/model.h",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/lib/utils/draw_util.h",
		"/data/disk1/workspace/uniqueID/lib/additional/protomsg.pb.h",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/build/01_result/log_20210107.log",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/lib/utils/nvidia_gpu_util.cpp",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/SDK_main.cpp",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/lib/utils/config_util.h",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/lib/utils/geometry_util.cpp",
		"/data/disk1/workspace/uniqueID/lib/utils/geometry_util.cpp",
		"/data/disk1/workspace/uniqueID/lib/tracker_tools/tracker.h",
		"/data/disk1/workspace/uniqueID/lib/tracker_tools/track.cpp",
		"/data/disk1/workspace/uniqueID/SDK_main.cpp",
		"/home/scheaven/.config/sublime-text-3/Packages/User/ColorHighlighter.sublime-settings",
		"/home/scheaven/.config/sublime-text-3/Packages/User/SublimeAStyleFormatter.sublime-settings",
		"/home/scheaven/.config/sublime-text-3/Packages/User/ConvertToUTF8.sublime-settings",
		"/data/disk1/workspace/uniqueID/config.json",
		"/data/disk1/workspace/uniqueID/SDK_main_bak.cpp",
		"/data/disk1/workspace/uniqueID/lib/additional/protomsg.pb.cc",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/CMakeLists.txt",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/config.json",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/lib/encoder_tools/FeatureEncoder.h",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/lib/tracker_tools/kalmfilter.cpp",
		"/data/disk1/01_pro_inx/01_DarkNet_SORT_torch/untitled.sublime-project",
		"/data/disk1/workspace/01_DarkNet_SORT_torch/h_interface.cpp",
		"/data/disk1/project/gogo/project/05_test/geometry_util.cpp"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 31.0
	},
	"input":
	{
		"height": 41.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "log.sublime-project",
	"replace":
	{
		"height": 74.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 241.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
