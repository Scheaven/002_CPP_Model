// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protomsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protomsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protomsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protomsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protomsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protomsg_2eproto;
namespace protomsg {
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Rect;
class RectDefaultTypeInternal;
extern RectDefaultTypeInternal _Rect_default_instance_;
class RuleMessage;
class RuleMessageDefaultTypeInternal;
extern RuleMessageDefaultTypeInternal _RuleMessage_default_instance_;
class SDKMessage;
class SDKMessageDefaultTypeInternal;
extern SDKMessageDefaultTypeInternal _SDKMessage_default_instance_;
class Target;
class TargetDefaultTypeInternal;
extern TargetDefaultTypeInternal _Target_default_instance_;
}  // namespace protomsg
PROTOBUF_NAMESPACE_OPEN
template<> ::protomsg::Image* Arena::CreateMaybeMessage<::protomsg::Image>(Arena*);
template<> ::protomsg::Rect* Arena::CreateMaybeMessage<::protomsg::Rect>(Arena*);
template<> ::protomsg::RuleMessage* Arena::CreateMaybeMessage<::protomsg::RuleMessage>(Arena*);
template<> ::protomsg::SDKMessage* Arena::CreateMaybeMessage<::protomsg::SDKMessage>(Arena*);
template<> ::protomsg::Target* Arena::CreateMaybeMessage<::protomsg::Target>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protomsg {

// ===================================================================

class Image :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protomsg.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protomsg.Image";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protomsg_2eproto);
    return ::descriptor_table_protomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kCidFieldNumber = 6,
    kCnameFieldNumber = 7,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kIdFieldNumber = 5,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string timestamp = 4;
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // string cid = 6;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // string cname = 7;
  void clear_cname();
  const std::string& cname() const;
  void set_cname(const std::string& value);
  void set_cname(std::string&& value);
  void set_cname(const char* value);
  void set_cname(const char* value, size_t size);
  std::string* mutable_cname();
  std::string* release_cname();
  void set_allocated_cname(std::string* cname);
  private:
  const std::string& _internal_cname() const;
  void _internal_set_cname(const std::string& value);
  std::string* _internal_mutable_cname();
  public:

  // int32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 id = 5;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protomsg.Image)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cname_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protomsg_2eproto;
};
// -------------------------------------------------------------------

class Rect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protomsg.Rect) */ {
 public:
  Rect();
  virtual ~Rect();

  Rect(const Rect& from);
  Rect(Rect&& from) noexcept
    : Rect() {
    *this = ::std::move(from);
  }

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rect& operator=(Rect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rect* internal_default_instance() {
    return reinterpret_cast<const Rect*>(
               &_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Rect& a, Rect& b) {
    a.Swap(&b);
  }
  inline void Swap(Rect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rect* New() const final {
    return CreateMaybeMessage<Rect>(nullptr);
  }

  Rect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protomsg.Rect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protomsg_2eproto);
    return ::descriptor_table_protomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kTopFieldNumber = 2,
    kRightFieldNumber = 3,
    kBottomFieldNumber = 4,
  };
  // int32 left = 1;
  void clear_left();
  ::PROTOBUF_NAMESPACE_ID::int32 left() const;
  void set_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left() const;
  void _internal_set_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 top = 2;
  void clear_top();
  ::PROTOBUF_NAMESPACE_ID::int32 top() const;
  void set_top(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_top() const;
  void _internal_set_top(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 right = 3;
  void clear_right();
  ::PROTOBUF_NAMESPACE_ID::int32 right() const;
  void set_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_right() const;
  void _internal_set_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bottom = 4;
  void clear_bottom();
  ::PROTOBUF_NAMESPACE_ID::int32 bottom() const;
  void set_bottom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bottom() const;
  void _internal_set_bottom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protomsg.Rect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_;
  ::PROTOBUF_NAMESPACE_ID::int32 top_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_;
  ::PROTOBUF_NAMESPACE_ID::int32 bottom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protomsg_2eproto;
};
// -------------------------------------------------------------------

class Target :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protomsg.Target) */ {
 public:
  Target();
  virtual ~Target();

  Target(const Target& from);
  Target(Target&& from) noexcept
    : Target() {
    *this = ::std::move(from);
  }

  inline Target& operator=(const Target& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target& operator=(Target&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target* internal_default_instance() {
    return reinterpret_cast<const Target*>(
               &_Target_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Target& a, Target& b) {
    a.Swap(&b);
  }
  inline void Swap(Target* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target* New() const final {
    return CreateMaybeMessage<Target>(nullptr);
  }

  Target* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target& from);
  void MergeFrom(const Target& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protomsg.Target";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protomsg_2eproto);
    return ::descriptor_table_protomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kFeatureFieldNumber = 5,
    kAttributeFieldNumber = 6,
    kRectFieldNumber = 4,
    kIdFieldNumber = 1,
    kConfidenceFieldNumber = 3,
  };
  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes feature = 5;
  void clear_feature();
  const std::string& feature() const;
  void set_feature(const std::string& value);
  void set_feature(std::string&& value);
  void set_feature(const char* value);
  void set_feature(const void* value, size_t size);
  std::string* mutable_feature();
  std::string* release_feature();
  void set_allocated_feature(std::string* feature);
  private:
  const std::string& _internal_feature() const;
  void _internal_set_feature(const std::string& value);
  std::string* _internal_mutable_feature();
  public:

  // bytes attribute = 6;
  void clear_attribute();
  const std::string& attribute() const;
  void set_attribute(const std::string& value);
  void set_attribute(std::string&& value);
  void set_attribute(const char* value);
  void set_attribute(const void* value, size_t size);
  std::string* mutable_attribute();
  std::string* release_attribute();
  void set_allocated_attribute(std::string* attribute);
  private:
  const std::string& _internal_attribute() const;
  void _internal_set_attribute(const std::string& value);
  std::string* _internal_mutable_attribute();
  public:

  // .protomsg.Rect rect = 4;
  bool has_rect() const;
  private:
  bool _internal_has_rect() const;
  public:
  void clear_rect();
  const ::protomsg::Rect& rect() const;
  ::protomsg::Rect* release_rect();
  ::protomsg::Rect* mutable_rect();
  void set_allocated_rect(::protomsg::Rect* rect);
  private:
  const ::protomsg::Rect& _internal_rect() const;
  ::protomsg::Rect* _internal_mutable_rect();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 confidence = 3;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protomsg.Target)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attribute_;
  ::protomsg::Rect* rect_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protomsg_2eproto;
};
// -------------------------------------------------------------------

class SDKMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protomsg.SDKMessage) */ {
 public:
  SDKMessage();
  virtual ~SDKMessage();

  SDKMessage(const SDKMessage& from);
  SDKMessage(SDKMessage&& from) noexcept
    : SDKMessage() {
    *this = ::std::move(from);
  }

  inline SDKMessage& operator=(const SDKMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKMessage& operator=(SDKMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDKMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDKMessage* internal_default_instance() {
    return reinterpret_cast<const SDKMessage*>(
               &_SDKMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SDKMessage& a, SDKMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SDKMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SDKMessage* New() const final {
    return CreateMaybeMessage<SDKMessage>(nullptr);
  }

  SDKMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDKMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDKMessage& from);
  void MergeFrom(const SDKMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDKMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protomsg.SDKMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protomsg_2eproto);
    return ::descriptor_table_protomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 4,
    kSdkIDFieldNumber = 1,
    kSdkTypeFieldNumber = 2,
    kSdkNameFieldNumber = 3,
    kTimestampFieldNumber = 5,
  };
  // repeated .protomsg.Target target = 4;
  int target_size() const;
  private:
  int _internal_target_size() const;
  public:
  void clear_target();
  ::protomsg::Target* mutable_target(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protomsg::Target >*
      mutable_target();
  private:
  const ::protomsg::Target& _internal_target(int index) const;
  ::protomsg::Target* _internal_add_target();
  public:
  const ::protomsg::Target& target(int index) const;
  ::protomsg::Target* add_target();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protomsg::Target >&
      target() const;

  // string sdkID = 1;
  void clear_sdkid();
  const std::string& sdkid() const;
  void set_sdkid(const std::string& value);
  void set_sdkid(std::string&& value);
  void set_sdkid(const char* value);
  void set_sdkid(const char* value, size_t size);
  std::string* mutable_sdkid();
  std::string* release_sdkid();
  void set_allocated_sdkid(std::string* sdkid);
  private:
  const std::string& _internal_sdkid() const;
  void _internal_set_sdkid(const std::string& value);
  std::string* _internal_mutable_sdkid();
  public:

  // string sdkType = 2;
  void clear_sdktype();
  const std::string& sdktype() const;
  void set_sdktype(const std::string& value);
  void set_sdktype(std::string&& value);
  void set_sdktype(const char* value);
  void set_sdktype(const char* value, size_t size);
  std::string* mutable_sdktype();
  std::string* release_sdktype();
  void set_allocated_sdktype(std::string* sdktype);
  private:
  const std::string& _internal_sdktype() const;
  void _internal_set_sdktype(const std::string& value);
  std::string* _internal_mutable_sdktype();
  public:

  // string sdkName = 3;
  void clear_sdkname();
  const std::string& sdkname() const;
  void set_sdkname(const std::string& value);
  void set_sdkname(std::string&& value);
  void set_sdkname(const char* value);
  void set_sdkname(const char* value, size_t size);
  std::string* mutable_sdkname();
  std::string* release_sdkname();
  void set_allocated_sdkname(std::string* sdkname);
  private:
  const std::string& _internal_sdkname() const;
  void _internal_set_sdkname(const std::string& value);
  std::string* _internal_mutable_sdkname();
  public:

  // string timestamp = 5;
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // @@protoc_insertion_point(class_scope:protomsg.SDKMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protomsg::Target > target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdkid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdktype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdkname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protomsg_2eproto;
};
// -------------------------------------------------------------------

class RuleMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protomsg.RuleMessage) */ {
 public:
  RuleMessage();
  virtual ~RuleMessage();

  RuleMessage(const RuleMessage& from);
  RuleMessage(RuleMessage&& from) noexcept
    : RuleMessage() {
    *this = ::std::move(from);
  }

  inline RuleMessage& operator=(const RuleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuleMessage& operator=(RuleMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuleMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuleMessage* internal_default_instance() {
    return reinterpret_cast<const RuleMessage*>(
               &_RuleMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RuleMessage& a, RuleMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RuleMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuleMessage* New() const final {
    return CreateMaybeMessage<RuleMessage>(nullptr);
  }

  RuleMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuleMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuleMessage& from);
  void MergeFrom(const RuleMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protomsg.RuleMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protomsg_2eproto);
    return ::descriptor_table_protomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kDataTypeFieldNumber = 1,
    kHandleTrackFieldNumber = 2,
  };
  // repeated .protomsg.SDKMessage message = 3;
  int message_size() const;
  private:
  int _internal_message_size() const;
  public:
  void clear_message();
  ::protomsg::SDKMessage* mutable_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protomsg::SDKMessage >*
      mutable_message();
  private:
  const ::protomsg::SDKMessage& _internal_message(int index) const;
  ::protomsg::SDKMessage* _internal_add_message();
  public:
  const ::protomsg::SDKMessage& message(int index) const;
  ::protomsg::SDKMessage* add_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protomsg::SDKMessage >&
      message() const;

  // string dataType = 1;
  void clear_datatype();
  const std::string& datatype() const;
  void set_datatype(const std::string& value);
  void set_datatype(std::string&& value);
  void set_datatype(const char* value);
  void set_datatype(const char* value, size_t size);
  std::string* mutable_datatype();
  std::string* release_datatype();
  void set_allocated_datatype(std::string* datatype);
  private:
  const std::string& _internal_datatype() const;
  void _internal_set_datatype(const std::string& value);
  std::string* _internal_mutable_datatype();
  public:

  // string handleTrack = 2;
  void clear_handletrack();
  const std::string& handletrack() const;
  void set_handletrack(const std::string& value);
  void set_handletrack(std::string&& value);
  void set_handletrack(const char* value);
  void set_handletrack(const char* value, size_t size);
  std::string* mutable_handletrack();
  std::string* release_handletrack();
  void set_allocated_handletrack(std::string* handletrack);
  private:
  const std::string& _internal_handletrack() const;
  void _internal_set_handletrack(const std::string& value);
  std::string* _internal_mutable_handletrack();
  public:

  // @@protoc_insertion_point(class_scope:protomsg.RuleMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protomsg::SDKMessage > message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datatype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handletrack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protomsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Image

// int32 width = 1;
inline void Image::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:protomsg.Image.width)
  return _internal_width();
}
inline void Image::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void Image::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:protomsg.Image.width)
}

// int32 height = 2;
inline void Image::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:protomsg.Image.height)
  return _internal_height();
}
inline void Image::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void Image::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:protomsg.Image.height)
}

// bytes data = 3;
inline void Image::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:protomsg.Image.data)
  return _internal_data();
}
inline void Image::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:protomsg.Image.data)
}
inline std::string* Image::mutable_data() {
  // @@protoc_insertion_point(field_mutable:protomsg.Image.data)
  return _internal_mutable_data();
}
inline const std::string& Image::_internal_data() const {
  return data_.GetNoArena();
}
inline void Image::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Image::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protomsg.Image.data)
}
inline void Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protomsg.Image.data)
}
inline void Image::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protomsg.Image.data)
}
inline std::string* Image::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:protomsg.Image.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:protomsg.Image.data)
}

// string timestamp = 4;
inline void Image::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::timestamp() const {
  // @@protoc_insertion_point(field_get:protomsg.Image.timestamp)
  return _internal_timestamp();
}
inline void Image::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:protomsg.Image.timestamp)
}
inline std::string* Image::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:protomsg.Image.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& Image::_internal_timestamp() const {
  return timestamp_.GetNoArena();
}
inline void Image::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Image::set_timestamp(std::string&& value) {
  
  timestamp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protomsg.Image.timestamp)
}
inline void Image::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protomsg.Image.timestamp)
}
inline void Image::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protomsg.Image.timestamp)
}
inline std::string* Image::_internal_mutable_timestamp() {
  
  return timestamp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_timestamp() {
  // @@protoc_insertion_point(field_release:protomsg.Image.timestamp)
  
  return timestamp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:protomsg.Image.timestamp)
}

// int64 id = 5;
inline void Image::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Image::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Image::id() const {
  // @@protoc_insertion_point(field_get:protomsg.Image.id)
  return _internal_id();
}
inline void Image::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Image::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protomsg.Image.id)
}

// string cid = 6;
inline void Image::clear_cid() {
  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::cid() const {
  // @@protoc_insertion_point(field_get:protomsg.Image.cid)
  return _internal_cid();
}
inline void Image::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:protomsg.Image.cid)
}
inline std::string* Image::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:protomsg.Image.cid)
  return _internal_mutable_cid();
}
inline const std::string& Image::_internal_cid() const {
  return cid_.GetNoArena();
}
inline void Image::_internal_set_cid(const std::string& value) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Image::set_cid(std::string&& value) {
  
  cid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protomsg.Image.cid)
}
inline void Image::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protomsg.Image.cid)
}
inline void Image::set_cid(const char* value, size_t size) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protomsg.Image.cid)
}
inline std::string* Image::_internal_mutable_cid() {
  
  return cid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_cid() {
  // @@protoc_insertion_point(field_release:protomsg.Image.cid)
  
  return cid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:protomsg.Image.cid)
}

// string cname = 7;
inline void Image::clear_cname() {
  cname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::cname() const {
  // @@protoc_insertion_point(field_get:protomsg.Image.cname)
  return _internal_cname();
}
inline void Image::set_cname(const std::string& value) {
  _internal_set_cname(value);
  // @@protoc_insertion_point(field_set:protomsg.Image.cname)
}
inline std::string* Image::mutable_cname() {
  // @@protoc_insertion_point(field_mutable:protomsg.Image.cname)
  return _internal_mutable_cname();
}
inline const std::string& Image::_internal_cname() const {
  return cname_.GetNoArena();
}
inline void Image::_internal_set_cname(const std::string& value) {
  
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Image::set_cname(std::string&& value) {
  
  cname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protomsg.Image.cname)
}
inline void Image::set_cname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protomsg.Image.cname)
}
inline void Image::set_cname(const char* value, size_t size) {
  
  cname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protomsg.Image.cname)
}
inline std::string* Image::_internal_mutable_cname() {
  
  return cname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_cname() {
  // @@protoc_insertion_point(field_release:protomsg.Image.cname)
  
  return cname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_cname(std::string* cname) {
  if (cname != nullptr) {
    
  } else {
    
  }
  cname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cname);
  // @@protoc_insertion_point(field_set_allocated:protomsg.Image.cname)
}

// -------------------------------------------------------------------

// Rect

// int32 left = 1;
inline void Rect::clear_left() {
  left_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_left() const {
  return left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::left() const {
  // @@protoc_insertion_point(field_get:protomsg.Rect.left)
  return _internal_left();
}
inline void Rect::_internal_set_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  left_ = value;
}
inline void Rect::set_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:protomsg.Rect.left)
}

// int32 top = 2;
inline void Rect::clear_top() {
  top_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_top() const {
  return top_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::top() const {
  // @@protoc_insertion_point(field_get:protomsg.Rect.top)
  return _internal_top();
}
inline void Rect::_internal_set_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  top_ = value;
}
inline void Rect::set_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:protomsg.Rect.top)
}

// int32 right = 3;
inline void Rect::clear_right() {
  right_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_right() const {
  return right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::right() const {
  // @@protoc_insertion_point(field_get:protomsg.Rect.right)
  return _internal_right();
}
inline void Rect::_internal_set_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  right_ = value;
}
inline void Rect::set_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:protomsg.Rect.right)
}

// int32 bottom = 4;
inline void Rect::clear_bottom() {
  bottom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_bottom() const {
  return bottom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::bottom() const {
  // @@protoc_insertion_point(field_get:protomsg.Rect.bottom)
  return _internal_bottom();
}
inline void Rect::_internal_set_bottom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bottom_ = value;
}
inline void Rect::set_bottom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bottom(value);
  // @@protoc_insertion_point(field_set:protomsg.Rect.bottom)
}

// -------------------------------------------------------------------

// Target

// uint64 id = 1;
inline void Target::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Target::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Target::id() const {
  // @@protoc_insertion_point(field_get:protomsg.Target.id)
  return _internal_id();
}
inline void Target::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Target::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protomsg.Target.id)
}

// string type = 2;
inline void Target::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Target::type() const {
  // @@protoc_insertion_point(field_get:protomsg.Target.type)
  return _internal_type();
}
inline void Target::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protomsg.Target.type)
}
inline std::string* Target::mutable_type() {
  // @@protoc_insertion_point(field_mutable:protomsg.Target.type)
  return _internal_mutable_type();
}
inline const std::string& Target::_internal_type() const {
  return type_.GetNoArena();
}
inline void Target::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Target::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protomsg.Target.type)
}
inline void Target::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protomsg.Target.type)
}
inline void Target::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protomsg.Target.type)
}
inline std::string* Target::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Target::release_type() {
  // @@protoc_insertion_point(field_release:protomsg.Target.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Target::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:protomsg.Target.type)
}

// int32 confidence = 3;
inline void Target::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Target::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Target::confidence() const {
  // @@protoc_insertion_point(field_get:protomsg.Target.confidence)
  return _internal_confidence();
}
inline void Target::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void Target::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:protomsg.Target.confidence)
}

// .protomsg.Rect rect = 4;
inline bool Target::_internal_has_rect() const {
  return this != internal_default_instance() && rect_ != nullptr;
}
inline bool Target::has_rect() const {
  return _internal_has_rect();
}
inline void Target::clear_rect() {
  if (GetArenaNoVirtual() == nullptr && rect_ != nullptr) {
    delete rect_;
  }
  rect_ = nullptr;
}
inline const ::protomsg::Rect& Target::_internal_rect() const {
  const ::protomsg::Rect* p = rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protomsg::Rect*>(
      &::protomsg::_Rect_default_instance_);
}
inline const ::protomsg::Rect& Target::rect() const {
  // @@protoc_insertion_point(field_get:protomsg.Target.rect)
  return _internal_rect();
}
inline ::protomsg::Rect* Target::release_rect() {
  // @@protoc_insertion_point(field_release:protomsg.Target.rect)
  
  ::protomsg::Rect* temp = rect_;
  rect_ = nullptr;
  return temp;
}
inline ::protomsg::Rect* Target::_internal_mutable_rect() {
  
  if (rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::protomsg::Rect>(GetArenaNoVirtual());
    rect_ = p;
  }
  return rect_;
}
inline ::protomsg::Rect* Target::mutable_rect() {
  // @@protoc_insertion_point(field_mutable:protomsg.Target.rect)
  return _internal_mutable_rect();
}
inline void Target::set_allocated_rect(::protomsg::Rect* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rect_;
  }
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    
  } else {
    
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:protomsg.Target.rect)
}

// bytes feature = 5;
inline void Target::clear_feature() {
  feature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Target::feature() const {
  // @@protoc_insertion_point(field_get:protomsg.Target.feature)
  return _internal_feature();
}
inline void Target::set_feature(const std::string& value) {
  _internal_set_feature(value);
  // @@protoc_insertion_point(field_set:protomsg.Target.feature)
}
inline std::string* Target::mutable_feature() {
  // @@protoc_insertion_point(field_mutable:protomsg.Target.feature)
  return _internal_mutable_feature();
}
inline const std::string& Target::_internal_feature() const {
  return feature_.GetNoArena();
}
inline void Target::_internal_set_feature(const std::string& value) {
  
  feature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Target::set_feature(std::string&& value) {
  
  feature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protomsg.Target.feature)
}
inline void Target::set_feature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  feature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protomsg.Target.feature)
}
inline void Target::set_feature(const void* value, size_t size) {
  
  feature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protomsg.Target.feature)
}
inline std::string* Target::_internal_mutable_feature() {
  
  return feature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Target::release_feature() {
  // @@protoc_insertion_point(field_release:protomsg.Target.feature)
  
  return feature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Target::set_allocated_feature(std::string* feature) {
  if (feature != nullptr) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:protomsg.Target.feature)
}

// bytes attribute = 6;
inline void Target::clear_attribute() {
  attribute_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Target::attribute() const {
  // @@protoc_insertion_point(field_get:protomsg.Target.attribute)
  return _internal_attribute();
}
inline void Target::set_attribute(const std::string& value) {
  _internal_set_attribute(value);
  // @@protoc_insertion_point(field_set:protomsg.Target.attribute)
}
inline std::string* Target::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable:protomsg.Target.attribute)
  return _internal_mutable_attribute();
}
inline const std::string& Target::_internal_attribute() const {
  return attribute_.GetNoArena();
}
inline void Target::_internal_set_attribute(const std::string& value) {
  
  attribute_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Target::set_attribute(std::string&& value) {
  
  attribute_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protomsg.Target.attribute)
}
inline void Target::set_attribute(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attribute_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protomsg.Target.attribute)
}
inline void Target::set_attribute(const void* value, size_t size) {
  
  attribute_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protomsg.Target.attribute)
}
inline std::string* Target::_internal_mutable_attribute() {
  
  return attribute_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Target::release_attribute() {
  // @@protoc_insertion_point(field_release:protomsg.Target.attribute)
  
  return attribute_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Target::set_allocated_attribute(std::string* attribute) {
  if (attribute != nullptr) {
    
  } else {
    
  }
  attribute_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attribute);
  // @@protoc_insertion_point(field_set_allocated:protomsg.Target.attribute)
}

// -------------------------------------------------------------------

// SDKMessage

// string sdkID = 1;
inline void SDKMessage::clear_sdkid() {
  sdkid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SDKMessage::sdkid() const {
  // @@protoc_insertion_point(field_get:protomsg.SDKMessage.sdkID)
  return _internal_sdkid();
}
inline void SDKMessage::set_sdkid(const std::string& value) {
  _internal_set_sdkid(value);
  // @@protoc_insertion_point(field_set:protomsg.SDKMessage.sdkID)
}
inline std::string* SDKMessage::mutable_sdkid() {
  // @@protoc_insertion_point(field_mutable:protomsg.SDKMessage.sdkID)
  return _internal_mutable_sdkid();
}
inline const std::string& SDKMessage::_internal_sdkid() const {
  return sdkid_.GetNoArena();
}
inline void SDKMessage::_internal_set_sdkid(const std::string& value) {
  
  sdkid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SDKMessage::set_sdkid(std::string&& value) {
  
  sdkid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protomsg.SDKMessage.sdkID)
}
inline void SDKMessage::set_sdkid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sdkid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protomsg.SDKMessage.sdkID)
}
inline void SDKMessage::set_sdkid(const char* value, size_t size) {
  
  sdkid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protomsg.SDKMessage.sdkID)
}
inline std::string* SDKMessage::_internal_mutable_sdkid() {
  
  return sdkid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SDKMessage::release_sdkid() {
  // @@protoc_insertion_point(field_release:protomsg.SDKMessage.sdkID)
  
  return sdkid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SDKMessage::set_allocated_sdkid(std::string* sdkid) {
  if (sdkid != nullptr) {
    
  } else {
    
  }
  sdkid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdkid);
  // @@protoc_insertion_point(field_set_allocated:protomsg.SDKMessage.sdkID)
}

// string sdkType = 2;
inline void SDKMessage::clear_sdktype() {
  sdktype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SDKMessage::sdktype() const {
  // @@protoc_insertion_point(field_get:protomsg.SDKMessage.sdkType)
  return _internal_sdktype();
}
inline void SDKMessage::set_sdktype(const std::string& value) {
  _internal_set_sdktype(value);
  // @@protoc_insertion_point(field_set:protomsg.SDKMessage.sdkType)
}
inline std::string* SDKMessage::mutable_sdktype() {
  // @@protoc_insertion_point(field_mutable:protomsg.SDKMessage.sdkType)
  return _internal_mutable_sdktype();
}
inline const std::string& SDKMessage::_internal_sdktype() const {
  return sdktype_.GetNoArena();
}
inline void SDKMessage::_internal_set_sdktype(const std::string& value) {
  
  sdktype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SDKMessage::set_sdktype(std::string&& value) {
  
  sdktype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protomsg.SDKMessage.sdkType)
}
inline void SDKMessage::set_sdktype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sdktype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protomsg.SDKMessage.sdkType)
}
inline void SDKMessage::set_sdktype(const char* value, size_t size) {
  
  sdktype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protomsg.SDKMessage.sdkType)
}
inline std::string* SDKMessage::_internal_mutable_sdktype() {
  
  return sdktype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SDKMessage::release_sdktype() {
  // @@protoc_insertion_point(field_release:protomsg.SDKMessage.sdkType)
  
  return sdktype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SDKMessage::set_allocated_sdktype(std::string* sdktype) {
  if (sdktype != nullptr) {
    
  } else {
    
  }
  sdktype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdktype);
  // @@protoc_insertion_point(field_set_allocated:protomsg.SDKMessage.sdkType)
}

// string sdkName = 3;
inline void SDKMessage::clear_sdkname() {
  sdkname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SDKMessage::sdkname() const {
  // @@protoc_insertion_point(field_get:protomsg.SDKMessage.sdkName)
  return _internal_sdkname();
}
inline void SDKMessage::set_sdkname(const std::string& value) {
  _internal_set_sdkname(value);
  // @@protoc_insertion_point(field_set:protomsg.SDKMessage.sdkName)
}
inline std::string* SDKMessage::mutable_sdkname() {
  // @@protoc_insertion_point(field_mutable:protomsg.SDKMessage.sdkName)
  return _internal_mutable_sdkname();
}
inline const std::string& SDKMessage::_internal_sdkname() const {
  return sdkname_.GetNoArena();
}
inline void SDKMessage::_internal_set_sdkname(const std::string& value) {
  
  sdkname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SDKMessage::set_sdkname(std::string&& value) {
  
  sdkname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protomsg.SDKMessage.sdkName)
}
inline void SDKMessage::set_sdkname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sdkname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protomsg.SDKMessage.sdkName)
}
inline void SDKMessage::set_sdkname(const char* value, size_t size) {
  
  sdkname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protomsg.SDKMessage.sdkName)
}
inline std::string* SDKMessage::_internal_mutable_sdkname() {
  
  return sdkname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SDKMessage::release_sdkname() {
  // @@protoc_insertion_point(field_release:protomsg.SDKMessage.sdkName)
  
  return sdkname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SDKMessage::set_allocated_sdkname(std::string* sdkname) {
  if (sdkname != nullptr) {
    
  } else {
    
  }
  sdkname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdkname);
  // @@protoc_insertion_point(field_set_allocated:protomsg.SDKMessage.sdkName)
}

// repeated .protomsg.Target target = 4;
inline int SDKMessage::_internal_target_size() const {
  return target_.size();
}
inline int SDKMessage::target_size() const {
  return _internal_target_size();
}
inline void SDKMessage::clear_target() {
  target_.Clear();
}
inline ::protomsg::Target* SDKMessage::mutable_target(int index) {
  // @@protoc_insertion_point(field_mutable:protomsg.SDKMessage.target)
  return target_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protomsg::Target >*
SDKMessage::mutable_target() {
  // @@protoc_insertion_point(field_mutable_list:protomsg.SDKMessage.target)
  return &target_;
}
inline const ::protomsg::Target& SDKMessage::_internal_target(int index) const {
  return target_.Get(index);
}
inline const ::protomsg::Target& SDKMessage::target(int index) const {
  // @@protoc_insertion_point(field_get:protomsg.SDKMessage.target)
  return _internal_target(index);
}
inline ::protomsg::Target* SDKMessage::_internal_add_target() {
  return target_.Add();
}
inline ::protomsg::Target* SDKMessage::add_target() {
  // @@protoc_insertion_point(field_add:protomsg.SDKMessage.target)
  return _internal_add_target();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protomsg::Target >&
SDKMessage::target() const {
  // @@protoc_insertion_point(field_list:protomsg.SDKMessage.target)
  return target_;
}

// string timestamp = 5;
inline void SDKMessage::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SDKMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:protomsg.SDKMessage.timestamp)
  return _internal_timestamp();
}
inline void SDKMessage::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:protomsg.SDKMessage.timestamp)
}
inline std::string* SDKMessage::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:protomsg.SDKMessage.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& SDKMessage::_internal_timestamp() const {
  return timestamp_.GetNoArena();
}
inline void SDKMessage::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SDKMessage::set_timestamp(std::string&& value) {
  
  timestamp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protomsg.SDKMessage.timestamp)
}
inline void SDKMessage::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protomsg.SDKMessage.timestamp)
}
inline void SDKMessage::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protomsg.SDKMessage.timestamp)
}
inline std::string* SDKMessage::_internal_mutable_timestamp() {
  
  return timestamp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SDKMessage::release_timestamp() {
  // @@protoc_insertion_point(field_release:protomsg.SDKMessage.timestamp)
  
  return timestamp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SDKMessage::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:protomsg.SDKMessage.timestamp)
}

// -------------------------------------------------------------------

// RuleMessage

// string dataType = 1;
inline void RuleMessage::clear_datatype() {
  datatype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RuleMessage::datatype() const {
  // @@protoc_insertion_point(field_get:protomsg.RuleMessage.dataType)
  return _internal_datatype();
}
inline void RuleMessage::set_datatype(const std::string& value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:protomsg.RuleMessage.dataType)
}
inline std::string* RuleMessage::mutable_datatype() {
  // @@protoc_insertion_point(field_mutable:protomsg.RuleMessage.dataType)
  return _internal_mutable_datatype();
}
inline const std::string& RuleMessage::_internal_datatype() const {
  return datatype_.GetNoArena();
}
inline void RuleMessage::_internal_set_datatype(const std::string& value) {
  
  datatype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RuleMessage::set_datatype(std::string&& value) {
  
  datatype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protomsg.RuleMessage.dataType)
}
inline void RuleMessage::set_datatype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datatype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protomsg.RuleMessage.dataType)
}
inline void RuleMessage::set_datatype(const char* value, size_t size) {
  
  datatype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protomsg.RuleMessage.dataType)
}
inline std::string* RuleMessage::_internal_mutable_datatype() {
  
  return datatype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RuleMessage::release_datatype() {
  // @@protoc_insertion_point(field_release:protomsg.RuleMessage.dataType)
  
  return datatype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RuleMessage::set_allocated_datatype(std::string* datatype) {
  if (datatype != nullptr) {
    
  } else {
    
  }
  datatype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datatype);
  // @@protoc_insertion_point(field_set_allocated:protomsg.RuleMessage.dataType)
}

// string handleTrack = 2;
inline void RuleMessage::clear_handletrack() {
  handletrack_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RuleMessage::handletrack() const {
  // @@protoc_insertion_point(field_get:protomsg.RuleMessage.handleTrack)
  return _internal_handletrack();
}
inline void RuleMessage::set_handletrack(const std::string& value) {
  _internal_set_handletrack(value);
  // @@protoc_insertion_point(field_set:protomsg.RuleMessage.handleTrack)
}
inline std::string* RuleMessage::mutable_handletrack() {
  // @@protoc_insertion_point(field_mutable:protomsg.RuleMessage.handleTrack)
  return _internal_mutable_handletrack();
}
inline const std::string& RuleMessage::_internal_handletrack() const {
  return handletrack_.GetNoArena();
}
inline void RuleMessage::_internal_set_handletrack(const std::string& value) {
  
  handletrack_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RuleMessage::set_handletrack(std::string&& value) {
  
  handletrack_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protomsg.RuleMessage.handleTrack)
}
inline void RuleMessage::set_handletrack(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  handletrack_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protomsg.RuleMessage.handleTrack)
}
inline void RuleMessage::set_handletrack(const char* value, size_t size) {
  
  handletrack_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protomsg.RuleMessage.handleTrack)
}
inline std::string* RuleMessage::_internal_mutable_handletrack() {
  
  return handletrack_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RuleMessage::release_handletrack() {
  // @@protoc_insertion_point(field_release:protomsg.RuleMessage.handleTrack)
  
  return handletrack_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RuleMessage::set_allocated_handletrack(std::string* handletrack) {
  if (handletrack != nullptr) {
    
  } else {
    
  }
  handletrack_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), handletrack);
  // @@protoc_insertion_point(field_set_allocated:protomsg.RuleMessage.handleTrack)
}

// repeated .protomsg.SDKMessage message = 3;
inline int RuleMessage::_internal_message_size() const {
  return message_.size();
}
inline int RuleMessage::message_size() const {
  return _internal_message_size();
}
inline void RuleMessage::clear_message() {
  message_.Clear();
}
inline ::protomsg::SDKMessage* RuleMessage::mutable_message(int index) {
  // @@protoc_insertion_point(field_mutable:protomsg.RuleMessage.message)
  return message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protomsg::SDKMessage >*
RuleMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable_list:protomsg.RuleMessage.message)
  return &message_;
}
inline const ::protomsg::SDKMessage& RuleMessage::_internal_message(int index) const {
  return message_.Get(index);
}
inline const ::protomsg::SDKMessage& RuleMessage::message(int index) const {
  // @@protoc_insertion_point(field_get:protomsg.RuleMessage.message)
  return _internal_message(index);
}
inline ::protomsg::SDKMessage* RuleMessage::_internal_add_message() {
  return message_.Add();
}
inline ::protomsg::SDKMessage* RuleMessage::add_message() {
  // @@protoc_insertion_point(field_add:protomsg.RuleMessage.message)
  return _internal_add_message();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protomsg::SDKMessage >&
RuleMessage::message() const {
  // @@protoc_insertion_point(field_list:protomsg.RuleMessage.message)
  return message_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protomsg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protomsg_2eproto
